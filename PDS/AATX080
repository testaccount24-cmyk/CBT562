/*REXX*****************************************************************/
/*  NAME      -  AATX080                                              */
/*  PROJECT   -  ABEND-AID TOOLS (AAT)                                */
/*  TYPE      -  REXX PROGRAM                                         */
/*  FUNCTION  -  DISPLAYS PANEL AATP080 TO COLLECT THE NUMBERS TO BE  */
/*               CONVERTED OR USED IN THE CALCULATION SPECIFIED. THE  */
/*               USER ENTERS ONLY A HEX OR A DECIMAL NUMBER WHEN      */
/*               CONVERSION IS DESIRED. FOR CALCULATIONS, AN ARITH-   */
/*               METIC OPERATOR AND SECOND NUMBER ARE ENTERED. DATA   */
/*               ENTERED IS VALIDATED, THEN THE AATP081 SCREEN IS     */
/*               DISPLAYED TO SHOW THE CONVERSION AND RESULTS OF ANY  */
/*               CALCULATION SPECIFIED.                               */
/*  CALLED BY -  PANEL AATP000                                        */
/*  RELATED   -  PANELS AATP080, AATP081 AND MSG AATM08               */
/*  CALLS     -                                                       */
/*  AUTHOR    -  DICK THORNTON DEC 1999                               */
/**********************************************************************/
/**********************************************************************/
/*  THE PROGRAM RUNS IN A NEVER ENDING LOOP UNTIL THE USER HITS PF3   */
/*  1. INITIALIZE VARIABLES.                                          */
/*  2. DISPLAY THE AATP080 PANEL TO OBTAIN THE CONVERSION/CALCULATION */
/*     VARIABLES FROM THE USERS.                                      */
/*  3. ON RETURN FROM PANEL AATP080, EXIT IF THE USER HAS HIT PF3.    */
/*  4. VALIDATE THE USER SUPPLIED VARIABLES. IF ANY ERROR OCCURS,     */
/*     REDISPLAY AATP080 WITH AN ERROR MESAGE AND THE CURSOR SET ON   */
/*     THE FIELD IN ERROR.                                            */
/*  5. PERFORM ANY INDICATED CALCULATIONS.                            */
/*  6. DISPLAY THE AATP081 PANEL TO SHOW THE RESULTS TO THE USER.     */
/*  7. ON RETURN FROM PANEL AATP080, EXIT IF THE USER HAS HIT PF3.    */
/*  8. REPEAT STEPS 1-9.                                              */
/**********************************************************************/
/* TRACE ?ALL  */
NUMERIC DIGITS 32             /* SET NUMBER DIGITS FOR CALCULATIONS */
DO FOREVER
   D1 = ''; H1 = ''; OP = ''; D2 = '';H2 = '';DR = ''; HR = ''
   ERROR = 1; ERRMESG = ''; CURSLOC = 'H1'
   DO WHILE ERROR
      ADDRESS ISPEXEC 'DISPLAY PANEL(AATP080)'
      IF RC ¬= 0 THEN EXIT    /* ASSUME PF3 HIT OF RC IS NOT 0 */
      ERROR = 0; ERRMESG = ''; CURSLOC = 'H1'
      CALL VALIDATE           /* VALIDATE D1 AND D2 PANEL VARIABLES */
      IF ERROR ¬= 0 THEN ITERATE /* IF ERROR, RE-DISPLAY AATP080 */
      IF OP ¬= '' THEN CALL CALCULATE /* IF OPERATION GIVEN, DO CALC */
      ADDRESS ISPEXEC 'DISPLAY PANEL(AATP081)'  /* DISPLAY RESULTS */
      IF RC ¬= 0 THEN EXIT    /* ASSUME PF3 HIT IF RC IS NOT 0 */
      ERROR = 0; ERRMESG = ''; CURSLOC = 'H1'
   END
END
/********************************************************************/
/*  VALIDATE THE VARIABLE DATA ENTERED BY THE USER AND PERFORM THE  */
/*  CONVERSIONS NECESSARY SO THAT BOTH DECIMAL AND HEX VALUES ARE   */
/*  AVAILABLE FOR CALCULATION AND DISPLAY.                          */
/********************************************************************/
VALIDATE:
   IF D1 = '' THEN DO
      H1LEN = LENGTH(H1)
      IF ((H1LEN = 4) | (H1LEN = 8)) THEN D1 = X2D(H1,H1LEN)
      ELSE D1 = X2D(H1)
      REALD1 = D1; REALH1 = H1
   END
   ELSE DO
      TESTDEC = D1
      CALL VALIDATE_DECIMAL
      IF ERROR ¬= 0 THEN CURSLOC = 'H1'
      ELSE DO
         D1 = REALDEC; REALD1 = D1
         H1 = REALHEX; REALH1 = H1
      END
   END
   IF OP = '' THEN NOP     /* IF OPERATION BLANK, NO D2 */
   ELSE DO
      IF D2 = '' THEN DO
         H2LEN = LENGTH(H2)
         IF ((H2LEN = 4) | (H2LEN = 8)) THEN D2 = X2D(H2,H2LEN)
         ELSE D2 = X2D(H2)
         REALD2 = D2; REALH2 = H2
      END
      ELSE DO
         TESTDEC = D2
         CALL VALIDATE_DECIMAL
         IF ERROR ¬= 0 THEN CURSLOC = 'H2'
         ELSE DO
            D2 = REALDEC; REALD2 = D2
            H2 = REALHEX; REALH2 = H2
         END
      END
   END
RETURN
/********************************************************************/
/*  PERFORM THE USER SPECIFIED CALCULATION USING THE REAL DECIMAL   */
/*  FIELDS. THE HEX RESULT IS OBTAINED FROM THE DECIMAL VALUE.      */
/********************************************************************/
CALCULATE:
   IF OP = '+' THEN DR = REALD1 + REALD2
   ELSE
      IF OP = '-' THEN DR = REALD1 - REALD2
      ELSE
         IF OP = '*' THEN DR = REALD1 * REALD2
         ELSE
            IF OP = '/' THEN
               DO
                  DR = REALD1 % REALD2
                  DREM = REALD1 // REALD2
                  IF DREM ¬= 0 THEN ERRMESG = 'AATM081A'
               END
   IF ((DR > 2147483647) | (DR < -2147483648)) THEN
      DO
         ERRMESG = 'AATM089'
         CURSLOC = ''
      END
   ELSE
      DO
         I = 4
         IF ((DR > 32767) | (DR < -32768)) THEN I = 8
         HR = D2X(DR,I)
      END
RETURN
/********************************************************************/
/*  EDITS A DECIMAL NUMBER IN THE TESTDEC FIELD FOR VALIDITY. IF IT */
/*  CONTAINS A DECIMAL POINT, AN ERROR IS RECOGNIZED. OTHER TESTS   */
/*  HAVE ALREADY BEEN MADE BY PANEL VER STATEMENTS. THE NUMBER IS   */
/*  SCANNED AND THE SIGN, IF ANY, AND ALL DIGITS ARE MOVED TO THE   */
/*  REALDEC FIELD.                                                  */
/********************************************************************/
VALIDATE_DECIMAL:
   REALDEC = ''; REALHEX = ''
   NEXTBYTE = SUBSTR(TESTDEC,1,1)
   IF ((NEXTBYTE = '+') | (NEXTBYTE = '-')) THEN DO
      REALDEC = SUBSTR(TESTDEC,1,1)
      I = 2
   END
   ELSE I = 1
   DO I = I TO LENGTH(TESTDEC) BY 1
      NEXTBYTE = SUBSTR(TESTDEC,I,1)
      IF NEXTBYTE = ',' THEN ITERATE
      ELSE DO
         IF NEXTBYTE = '.' THEN DO
            ERROR = 1
            ERRMESG = 'AATM088'
            LEAVE
         END
         ELSE REALDEC = REALDEC || NEXTBYTE
      END
   END
   IF ERROR = 0 THEN
      IF ((REALDEC < -2147483648) | (REALDEC > 2147483647)) THEN DO
         ERROR = 1
         ERRMESG = 'AATM081B'
      END
      ELSE DO
         I = 4
         IF ((REALDEC > 32767) | (REALDEC < -32768)) THEN I = 8
         REALHEX = D2X(REALDEC,I)
      END
RETURN
