/* REXX ***************************************************************/
/*  TEST VARIOUS REXX CONSTRUCTS                                      */
/**********************************************************************/

SIGNAL THIS_IS_A_BRANCH_LABEL  /* SIGNAL FUNCTIONS AS A GOTO IN REXX */

/**********************************************************************/
/* CALL AN EXTERNAL PROGRAM USING STANDARD MAINFRAME LINKAGE. THE     */
/* LOAD LIBRARY CONTAINING THE PROGRAM IS SUPPLIED BY ALLOCATING IT   */
/* TO ISPLLIB. THE LENGTH OF THE RETURNED VARIABLE IS SET BEFORE THE  */
/* CALL. PROGRAM NAME MUST BE IN CAPS. RETURN CODE IS IN PREDEFINED   */
/* REXX VARIABLE RC.                                                  */
/**********************************************************************/
ADDRESS ISPEXEC "LIBDEF ISPLLIB DATASET ID('BC0THOR.LOAD.LOAD')"
JOBNAME = '12345678'           /* SET JOBNAME AS AN 8-BYTE VARIABLE */
ADDRESS LINKPGM 'GETJOBN JOBNAME' /* CALL GETJOBN SUBPROGRAM */
IF RC = 0 THEN                    /* RC IS VALUE IN R15 ON RETURN */
  SAY 'JOB NAME IS ' JOBNAME
ELSE DO                           /* DO USED TO GROUP INSTRUCTIONS */
       SAY 'CALL TO GETJOBN FAILED WITH RC =' RC
       SAY 'GETJOBN SHOULD HAVE RETURNED JOBNAME'
     END

/**********************************************************************/
/* CALL AN INTERNAL ROUTINE WHICH RETURNS A VALUE IN RESULT. INTERNAL */
/* ROUTINES CAN MANIPULATE VARIABLES IDENTIFIED IN THIS PROGRAM.      */
/**********************************************************************/
CALL ADDRTN 12.6 31.9
SAY '12.6 + 31.9 = ' RESULT


/**********************************************************************/
/* CALL AN EXTERNAL REXX ROUTINE WHICH RETURNS A VALUE IN RESULT. THE */
/* EXTERNAL PROGRAM NAME MUST BE IN CAPS, AND MUST BE IN THE SAME     */
/* LIBRARY AS THIS EXEC. CALLED PROGRAM CANNOT MODIFY VARIABLES PASSED*/
/**********************************************************************/
CALL "TEST1" 12.6 31.9
SAY '12.6 - 31.9 = ' RESULT

/**********************************************************************/
/* DO GROUPS. SIMPLE INSTRUCTION-GROUPING DO SHOWN ABOVE WITH ADDRESS.*/
/**********************************************************************/
FIVE = 5
DO FIVE                    /* SIMPLE INSTRUCTION SEQUENCE REPEAT */
   FIVE = FIVE + 1         /* NOTE THAT CHANGING THE REPEAT VARIABLE
                              DOES NOT AFFECT THE LOOP COUNT */
   SAY 'THE VARIABLE FIVE NOW HAS THE VALUE' FIVE
END

I = 0.3
DO Y=I TO I+4 BY 0.7 FOR 10  /* THE FOR VALUE MERELY SETS A MAXIMUM
                                NUMBER OF ITERATIONS. NOTE THE LOOP
                                VARIABLES CAN BE FRACTIONAL. */
   SAY 'Y IS NOW' Y
END

A = 0
DO OUTER = 1 TO 10         /* NESTED DO LOOPS */
   DO INNER = 1 TO 5
      A = A + 2
   END INNER               /* STATING LOOP VARIABLE ON END IMPROVES */
END OUTER                  /* EFFICIEMCY AND HELPS IDENTIFY THE LOOP */
SAY 'VALUE IN A AFTER OUTER-INNER LOOP IS' A

DO I = 1 TO 30 BY 3 UNTIL I > 25 /* UNTIL IS TESTED AT BOTTOM OF LOOP,
                                    WHILE IS TESTED AT TOP OF LOOP */
   IF I = 10 THEN ITERATE     /* JUMP TO TOP WHEN I = 10 */
   IF I = 22 THEN LEAVE       /* EXIT LOOP WHEN I = 22 */
   SAY 'I =' I
END

A = 0
DO FOREVER                 /* REQUIRES LOOP TO BE BROKEN FROM WITHIN */
  A = A + 1
  IF A = 5 THEN LEAVE
  SAY 'FOREVER LEAVES WHEN A = 5. A IS NOW' A
END

DROP A I                      /* DROP RELEASES A VARIABLE */
SAY 'VALUES FOR A AND I ARE NOW:' A 'AND' I

IF ANSWER = YES THEN SAY 'ANSWER IS YES' /* IF ELSE ON SAME LINE AS */
   ELSE SAY 'ANSWER IS NOT YES'  /* THEN, PRECEDE IT WITH SEMICOLON */

IF ANSWER = 'YES' THEN     /* ELSE BINDS TO NEAREST IF WITHOUT AN */
   IF A = 3                /* ASSOCIATED ELSE. TO ELIMINATE ERRORS */
      THEN SAY 'A IS 3'    /* USE THE ELSE NOP CONSTRUCT. */
   ELSE
      NOP
ELSE
   SAY 'ANSWER IS NOT YES'

START = 'DO I = 1 TO 3;' /* INTERPRET BUILDS */
MIDDLE = "SAY 'I IS NOW' I; SAY 'CONTINUING...'" /* A STRING FROM AN */
FINISH = ';END'                                  /* EXPRESSION, THEN */
INTERPRET START MIDDLE FINISH                    /* EXECUTES IT */

THIS_IS_A_BRANCH_LABEL:
SAY 'GOT TO THE BRANCH LABEL'





J = 3
EXIT 4 * J   /* EXITS WITH (OPTIONAL) STRING '12' RETURNED TO CALLER */

/**********************************************************************/
/* INTERNAL SUBROUTINE RETURNING A VALUE IN THE PREDEFINED REXX       */
/* VARIABLE NAMED RESULT.                                             */
/**********************************************************************/
ADDRTN:
ARG NUM1 NUM2                    /* DIG OUT PARMS PASSED */
SUM = NUM1 + NUM2                /* ADD THE NUMBERS      */
RETURN SUM                       /* RETURN THE SUM IN RESULT */
