./ ADD NAME=#CUT     0100-98274-98274-1158-00025-00025-00000-BC0THOR
)ATTR DEFAULT(%+_)
)BODY Expand(\\)
%Tutorial \-\  CUT  \-\ Tutorial
%SELECTION ===>_ZCMD                                                           +
%                     --------------------------------
                      |     Edit Macro  "CUT"        |
                      --------------------------------
+
    This Edit Macro will save the data indicated by the copy/move line
    commands.

    The CUT data is remembered between edit sessions.

    To view all past cut data, specify LIST as the level. The list that
    is given supports the "B" Browse and "D" Delete line commands.

    The data is retrieved by the PASTE Edit Macro.

%SYNTAX:+   CUT  level
+
+           level is a 5 byte alpha-nueric identifier.
            The default level is "A".
+
)PROC
)END
./ ADD NAME=#CUTD    0100-98274-98274-1159-00021-00021-00000-BC0THOR
)ATTR
 ! TYPE(INPUT) INTENS(HIGH) CAPS(ON)
 \ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(LEFT)
)BODY
%-----------------------  ISPF/PDF CUT MEMBERS  --------------------------------
%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +
+  LEVEL  RECORDS   CREATED    FIRST RECORD
)MODEL
!Z\Z    +  \RECCNT+\CREATED + \RECORD                                          +
)INIT
  .HELP = #CUT
  .ZVARS = '(ZSCML LSEL LEVEL)'
  &LSEL = &Z
)PROC
 IF (&ZCMD ¬= &Z) .MSG = ISPZ001
 VPUT (ZSCML) PROFILE
 IF (&ZTDSELS ¬= 0)
     VER (&LSEL,LIST,S,D,B MSG= DTSM001)
 &UMSG1 = 'INVALID VALUE'
 &LMSG1 = 'ENTER ''S'' OR ''B'' TO SELECT OR ''D'' TO DELETE THE MEMBER'
)END
./ ADD NAME=#PASD    0100-98274-98274-1159-00021-00021-00000-BC0THOR
)ATTR
 ! TYPE(INPUT) INTENS(HIGH) CAPS(ON)
 \ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(LEFT)
)BODY
%-----------------------  ISPF/PDF CUT MEMBERS  --------------------------------
%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +
+  LEVEL  RECORDS   CREATED    FIRST RECORD
)MODEL
!Z\Z    +  \RECCNT+\CREATED + \RECORD                                          +
)INIT
  .HELP =  #PASTE
  .ZVARS = '(ZSCML LSEL LEVEL)'
  &LSEL = &Z
)PROC
 IF (&ZCMD ¬= &Z) .MSG = ISPZ001
 VPUT (ZSCML) PROFILE
 IF (&ZTDSELS ¬= 0)
     VER (&LSEL,LIST,S,B MSG= DTSM001)
 &UMSG1 = 'INVALID VALUE'
 &LMSG1 = 'ENTER ''S'' TO SELECT OR ''B'' TO BROWSE THE MEMBER'
)END
./ ADD NAME=#PASTE   0100-98274-98274-1200-00022-00022-00000-BC0THOR
)ATTR DEFAULT(%+_)
)BODY Expand(//)
%Tutorial /-/  PASTE  /-/ Tutorial
%SELECTION ===>_ZCMD                                                           +
%                     --------------------------------
                      |     Edit Macro  "PASTE"      |
                      --------------------------------
+
    This Edit Macro will retrieve data saved by the CUT Edit Macro command.
    The original data is undisturbed. The placement of the data is determined
    by the placement of the "A" After or "B" Before line commands.

    The special level LIST will list all available CUT files to allow
    "S", select or "B" Browse line commands.

%SYNTAX:+   PASTE level
+
+           level is a 5 byte alpha-numeric identifier.
+           The default is list all current File Folders.
+
)PROC
)END
./ ADD NAME=AATH000  0106-00026-01037-1124-00039-00031-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH000               ABEND-AID DUMP TOOLS TUTORIAL HELP
%NEXT SELECTION ===>_ZCMD  +
+
+ This is a set of panels intended to aid COBOL programmers in use of
+ the Abend-Aid dump. The principal areas addressed include location
+ of the COBOL program statement where the abend occurred, location of
+ data field contents in the Abend-Aid dump, and interpretation of the
+ data found. Subscripts and indexes are handled as separate types of
+ data fields whose contents are validated and related to the occurring
+ table element to which they refer by occurrence number and offset.
+
+ The following topics can be viewed in sequence, or may be selected by
+ number:
+
+   1  FIND INST -  Finding the Failing Instruction in a COBOL program.
+   3  LOCATE FLD-  Locating Fields in the Abend-Aid Dump
+   6  SUBSCRIPT -  Working with Subscripts.
+   7  INDEX     -  Working with Indexes.
+   8  CALC/CONV -  Hexadecimal/Decimal Converter/Calculator.
+   9  INTERPRET -  Interpreting Memory Contents.
+
+
+ Make a selection and press Enter or press PF3 to return.
)INIT
)PROC
  &ZSEL = TRANS(&ZCMD
                 1,AATH010
                 3,AATH030
                 6,AATH060
                 7,AATH070
                 8,AATH080
                 9,AATH090
                 *,'?' )
)END
./ ADD NAME=AATH010  0105-00024-00027-0757-00036-00031-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH010           FINDING THE LINE NUMBER IN THE COBOL PROGRAM
%NEXT SELECTION ===>_ZCMD  +
+
+Finding the abending instruction in the COBOL program requires you to
+have access to the Abend-Aid dump and the COBOL compile listing for the
+abending program. In this panel you are asked to enter several items of
+information. The information entered is validated by a number of tests
+which include: (1) Program Name must be a syntactically valid name; (2)
+Completion Code must be Uxxx or Sxxx, where xxx is valid hex; (3) Abend
+Displacement must be less than Program Length; (4) Abend Displacement
+must be an even number unless Completion Code is S0C6; (5) HEXLOC must  be
+less than Abend Displacement; (6) If HEXLOC is more than 32 bytes less
+than Abend Displacement, a cautionary message is displayed, though this
+may be valid; (7) All decimal and hex fields are checked for valid data .
+
+The following topic will be presented only if explicitly selected by
+number:
+   %1+ Finding the HEXLOC and Instruction Number in a COBOL compile
+       Listing
+
+
+
+ Select 1 and press Enter or press PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZSEL = TRANS(&ZCMD
     1,*AATH011
     *,'?')
&ZUP = AATH000
)END
./ ADD NAME=AATH011  0103-00026-00027-0757-00033-00031-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN)  SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATH011  FINDING THE HEXLOC AND INSTRUCTION NUMBER IN A COBOL COMPILE
@
@ The CLIST in the COBOL compile immediately follows the Constant Global
@ Table (CGT) toward the back of the listing. It is in 3 columns, each
@ headed with LINE #  HEXLOC  VERB. If you view the listing on a TSO
@ terminal, you will have to shift left and right to see all 3 columns.
@ Example (includes last line of the CGT):
@
@ 0011A4  (LIT+4128)   0040C000 01400006 08000020 06B50240 00080800 002006
@ LINE #  HEXLOC  VERB                        LINE #  HEXLOC  VERB
@ 001747 00163A CALL                          001748 001666 MOVE
@ 001751 001688 PERFORM                       001756 001690 CALL
@ 001760 0016CE IF                            001761 0016D4 GO
@ 001764 0016F4 DISPLAY                       001765 001706 DISPLAY
@ ______ ______
@   |      |
@   |      |---> Compare the abend displacement to the HEXLOC column to
@   |            find the HIGHEST HEXLOC that is LESS THAN the abend
@   |            displacement. Be sure to shift right to see the third
@   |            column as well.
@   |---> This is the COBOL program line number for the statement.
@
@ Press Enter or PF3 to return.
)INIT
.HELP = AATH010
)PROC
  &ZUP = AATH010
)END
./ ADD NAME=AATH030  0101-00026-00026-1455-00036-00036-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH030             FINDING DATA FIELD CONTENTS IN THE ABEND-AID DUMP
%NEXT SELECTION ===>_ZCMD  +
+
+When a subscripted or indexed field is to be found, you should first
+use the Subscript or Index panels (Main Menu options 6 or 7) to obtain
+the offset due to the subscript(s) or index(es), since this offset data .
+is needed before the field can be found in the dump.
+
+Three panels are involved in this process. The first obtains information
+from you that you must locate in the COBOL compile listing. The second
+explains how to locate the data in the Abend-Aid dump, and asks you to
+key in the data found. The third panel interprets the data using the
+data type and the hex value you entered: the value is always given in
+hexadecimal and character form; when the data type is numeric (packed,
+binary, or zoned), it is tested for validity, and a message is displayed
+if the content is not valid for the type. For valid numeric data, the
+value is given in both binary (hex) and decimal forms.
+
+The following topic will be presented only if explicitly selected by
+number:
+   %1+ Locating Field Data in the COBOL Compile Listing
+
+ Select 1 and press Enter or press PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZSEL = TRANS(&ZCMD
     1,*AATH031
     *,'?')
&ZUP = AATH000
)END
./ ADD NAME=AATH031  0105-00024-00027-0759-00033-00031-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATH031          LOCATING FIELD DATA IN THE COBOL COMPILE
@
@ Much of the data requested on the data entry panels comes from
@ the COBOL compile listing to the right of the field definition:
@
@    like: BLF=0000+029,0000001 6P      --> The field length is given here
@    or:   BLW=0000+029,0000001 0CL6    |   as the non-zero number. A zero
@    or:   BLL=0000+029,0000001 6C      |   shows a group item. The letter
@            _      ___         ____    |   "P" is for a packed decimal
@            |       |           |      |   field, but the PIC clause must
@            |       |           |______|   be used for other types.
@            |       |
@            |       |--> This is the offset from the BL cell.
@            |
@            |--> This is the BL cell type (F, W, or L)
@
@  Use the PIC clause for data types.
@     P (Packed decimal) has a COMP-3:    PIC S9(5)V99 COMP-3.
@     B (Binary) has a COMP:              PIC 9(7) COMP.
@     Z (Zoned decimal) has neither COMP nor COMP-3: PIC 9(7)V9.
@     C (Character) data is non-numeric:  PIC X(23) or PIC ZZ9,999.99
@
@ Press Enter to return
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH030
)END
./ ADD NAME=AATH060  0100-00026-00026-1512-00038-00038-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH060             FINDING SUBSCRIPT CONTENTS IN THE ABEND-AID DUMP
%NEXT SELECTION ===>_ZCMD  +
+
+Three panels are involved in this process. The first obtains information
+from you that you must locate in the COBOL compile listing. The second
+explains how to locate the subscript in the Abend-Aid dump, and asks
+you to key in the data found. The third panel interprets the data
+using the data type and the hex value you entered: the value is always
+given in hexadecimal and character form; when the data type is numeric
+(packed, binary, or zoned), it is tested for validity, and a message is
+displayed if the content is not valid for the type. For valid numeric
+data, the value is given in both binary (hex) and decimal forms. In
+addition, the offset due to the subscript is computed and displayed in
+hex, which should be entered on the Sub/Indx Off field on the AATP030
+panel (Main Menu option 3).
+
+
+The following topics will be presented only if explicitly selected by
+number:
+   %1+ Subscript Data Collection Instructions (OCCURS Data)
+   %2+ Locating Field Data in the COBOL Compile Listing
+
+
+ Select 1 and press Enter or press PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZSEL = TRANS(&ZCMD
     1,*AATH061
     2,*AATH031
     *,'?')
&ZUP = AATH000
)END
./ ADD NAME=AATH061  0103-00024-00027-0800-00033-00031-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATH061     SUBSCRIPT DATA COLLECTION INSTRUCTIONS (OCCURS DATA)
@
@ In COBOL, a table may have one or two levels of subscript. When two
@ subscript levels are used, first find the offset due to the first
@ subscript, then find the offset due to the second subscript and add
@ the two offsets before trying to locate the subscripted data field via
@ Main Menu option 3. For example:
@    01  STATE-COUNTY-TABLE    OCCURS 50 TIMES.
@        05 STATE-NAME         PIC X(15).
@        05 COUNTY-TABLE       OCCURS 200 TIMES.
@           10  COUNTY-NAME    PIC X(15).
@
@ If you wish to find the field COUNTY-NAME (STATE-NO, COUNTY-NO) where the
@ subscripts used are STATE-NO and COUNTY-NO, you would first use Main Menu
@ option 6 to find the offset due to STATE-NO, then use it again to find
@ the offset due to COUNTY-NO, and add the resulting offsets (using Main
@ Menu option 8 if desired). The sum is the value to be used as Sub/Indx Off
@ on the Main Menu option 3 panel.
@
@ When finding the offset due to a subscript, be sure to use the number of
@ occurrences and occurring field length appropriate to the subscript.
@
@ Press Enter to return
)INIT
.HELP = AATH060
)PROC
&ZUP = AATH060
)END
./ ADD NAME=AATH070  0100-00026-00026-1547-00036-00036-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH070             FINDING INDEX CONTENTS IN THE ABEND-AID DUMP
%NEXT SELECTION ===>_ZCMD  +
+
+Three panels are involved in this process. The first obtains information
+from you that you must locate in the COBOL compile listing. The second
+explains how to locate the index value in the Abend-Aid dump, and asks
+you to key in that data value. The third panel computes and displays
+the equivalent occurrence number (the number that would have been used
+in a subscript to arrive at the same element in the table). In order
+to be valid, the index content must be an exact multiple of the length
+of the occurring field. If not, you have probably used an incorrect
+index, or typed the value incorrectly. an error message is also given if
+the computed occurrence number is greater than the number of OCCURS for
+the table. The index content should be entered on the Sub/Indx Off field
+on the AATP030 panel (Main Menu option 3).
+
+The following topic will be presented only if explicitly selected by
+number:
+   %1+ Obtaining the Value of an Index from the Dump
+
+
+
+ Select 1 and press Enter or press PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZSEL = TRANS(&ZCMD
     1,*AATH071
     *,'?')
&ZUP = AATH000
)END
./ ADD NAME=AATH071  0103-00026-00027-0801-00033-00032-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATH071     OBTAINING THE VALUE OF AN INDEX FROM THE DUMP
@
@ In COBOL, a table may have one or two levels of indexing. When two
@ index levels are used, first find the value in the first index, then
@ find the value in the second index and add the two before trying to
@ locate the indexed field via Main Menu option 3.
@ For example:
@    01  STATE-COUNTY-TABLE    OCCURS 50 TIMES INDEXED BY STATE-NO.
@        05 STATE-NAME         PIC X(15).
@        05 COUNTY-TABLE       OCCURS 200 TIMES INDEXED BY COUNTY-NO.
@           10  COUNTY-NAME    PIC X(15).
@
@ If you wish to find the field COUNTY-NAME (STATE-NO, COUNTY-NO) where the
@ indexes used are STATE-NO and COUNTY-NO, you would first use Main Menu
@ option 7 to find the value in STATE-NO, then use it again to find the
@ value in COUNTY-NO, and add the resulting index values (using Main
@ Menu option 8 if desired). The sum is the value to be used as Sub/Indx Off
@ on the Main Menu option 3 panel.
@
@ When finding the offset due to an index, be sure to use the number of
@ occurrences and occurring field length appropriate to the index.
@
@ Press Enter to return
)INIT
.HELP = AATH070
)PROC
&ZUP = AATH070
)END
./ ADD NAME=AATH080  0100-00026-00026-1604-00033-00033-00000-BC0THOR
)ATTR DEFAULT(%¬_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH080             CALCULATIONS AND CONVERSIONS IN HEX AND DECIMAL
%NEXT SELECTION ===>_ZCMD  ¬
¬
¬Two panels are used here, the first to obtain user data, and the second
¬to display the results. In the first panel, the user enters either a
¬hex or a decimal number in the 1st Number column. If nothing is
¬entered in the Operation column, a conversion is called for, and the
¬second panel shows the number entered in both hex and decimal forms.
¬
¬When a calculation is to be done, the Operation must be set to +, -,
¬*, or / to perform addition, subtraction, multiplication, or division.
¬Also, either a hex or a decimal number must be entered in the 1st
¬Number column and in the 2nd Number column. The result is displayed
¬on the second panel. Both numbers are converted and are displayed in
¬both hex and decimal forms.
¬
¬
¬
¬
¬
¬
¬
¬ Press Enter to continue with HELP or PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZUP = AATH000
)END
./ ADD NAME=AATH090  0100-00026-00026-1607-00033-00033-00000-BC0THOR
)ATTR DEFAULT(%¬_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATH090             INTERPRETATION OF MEMORY CONTENT
%NEXT SELECTION ===>_ZCMD  ¬
¬
¬This is simply a scrollable window that shows all the possible values
¬for a single byte in memory. There are columns for the Decimal value,
¬the Hex value, the EBCDIC value, the ASCII value, and the instruction
¬mnemonic.
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬
¬ Press Enter to continue with HELP or PF3 to return
)INIT
.HELP = AATH000
)PROC
&ZUP = AATH000
)END
./ ADD NAME=AATH911  0100-00027-00027-0840-00034-00034-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
+AATH911    LOCATING WORKING STORAGE FIELDS IN THE ABEND-AID DUMP
+NEXT SELECTION ===>_ZCMD  +
+
+To find WORKING-STORAGE data fields in the Abend-Aid dump when you are
+given the BLW Cell number, offset, data column number, and starting byte
+number, first locate the heading: "Working storage referenced by BLW
+cell   n (X'x')" where n is the decimal and x is the hexadecimal BLW
+cell number. The data below is shown in 11 columns, where column 1 is
+a 6-digit displacement from the beginning of the BLW cell, column 2 is
+an 8-digit memory address, columns 3-10 are 8-digit (4-byte) data
+columns, and the 11th column is a 32-byte character equivalent.
+
+DSPL Addres --------------------------Data--------------------------
+xxxx xxxxxx xxxxxx xxxxxx xxxxxx xxxxxx  xxxxxx xxxxxx xxxxxx xxxxxx ccc
+ |     |      |      |      |      |       |      |      |      |     |
+ D     A      D      D      D      D       D      D      D      D     C
+ i     d      a      a      a      a       a      a      a      a     h
+ s     d      t      t      t      t       t      t      t      t     a
+ p     r      a      a      a      a       a      a      a      a     r
+ l            1      2      3      4       5      6      7      8     s
+
+
+                        (Continued next page)
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH030
  &ZCONT = AATH911A
)END
./ ADD NAME=AATH911A 0101-00027-00027-0853-00033-00033-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
+AATH911A   LOCATING WORKING STORAGE FIELDS IN THE ABEND-AID DUMP
+NEXT SELECTION ===>_ZCMD  +
+
+Use the DSPL column to find the correct line, then go to the data column
+specified on the AATH911 panel as shown above. Each data column contains
+4 bytes (8 hex digits). Byte numbers within each data column are:
+
+                 xxxxxxxx
+                 | | | |
+                 | | | |---> byte 4
+                 | | |-----> byte 3
+                 | |-------> byte 2
+                 |---------> byte 1
+
+When reading out data, recall that each byte is 2 consecutive hex digits.
+The spaces between data columns are for readability, however the 4th
+byte of one data column is actually immediately before the first byte of
+the next column. Once you locate the first byte of your field, read left
+to right for the number of bytes in the field. If the field continues
+past byte 4 of the 8th data column, continue to byte 1 of data column 1
+on the next line below.
+
+                    (Continued from previous page)
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH911
)END
./ ADD NAME=AATH912  0100-00027-00027-0904-00034-00034-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
+AATH912    LOCATING LINKAGE SECTION FIELDS IN THE ABEND-AID DUMP
+NEXT SELECTION ===>_ZCMD  +
+
+To find LINKAGE SECTION data fields in the Abend-Aid dump when you are
+given the BLL Cell number, offset, data column number, and starting byte
+number, first locate the block titled "Data Division of Program xxxxxxxx"
+where xxxxxxxx is the name of the program in which the abend occurred.
+Next locate the line "Linkage storage referenced by BLL Cell   n (X'x')"
+where n is the decimal and x is the hexadecimal BLL cell number. The
+data below is shown in 11 columns, where column 1 is a 6-digit displace-
+ment from the beginning of the BLL cell, column 2 is an 8-digit memory
+address, columns 3-10 are 8-digit (4-byte) data columns, and the 11th
+column is a 32-byte character equivalent.
+DSPL Addres --------------------------Data--------------------------
+xxxx xxxxxx xxxxxx xxxxxx xxxxxx xxxxxx  xxxxxx xxxxxx xxxxxx xxxxxx ccc
+ |     |      |      |      |      |       |      |      |      |     |
+ D     A      D      D      D      D       D      D      D      D     C
+ i     d      a      a      a      a       a      a      a      a     h
+ s     d      t      t      t      t       t      t      t      t     a
+ p     r      a      a      a      a       a      a      a      a     r
+ l            1      2      3      4       5      6      7      8     s
+
+                        (Continued next page)
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH030
  &ZCONT = AATH912A
)END
./ ADD NAME=AATH912A 0100-00027-00027-0905-00033-00033-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
+AATH912A   LOCATING LINKAGE SECTION FIELDS IN THE ABEND-AID DUMP
+NEXT SELECTION ===>_ZCMD  +
+
+Use the DSPL column to find the correct line, then go to the data column
+specified on the AATH912 panel as shown above. Each data column contains
+4 bytes (8 hex digits). Byte numbers within each data column are:
+
+                 xxxxxxxx
+                 | | | |
+                 | | | |---> byte 4
+                 | | |-----> byte 3
+                 | |-------> byte 2
+                 |---------> byte 1
+
+When reading out data, recall that each byte is 2 consecutive hex digits.
+The spaces between data columns are for readability, however the 4th
+byte of one data column is actually immediately before the first byte of
+the next column. Once you locate the first byte of your field, read left
+to right for the number of bytes in the field. If the field continues
+past byte 4 of the 8th data column, continue to byte 1 of data column 1
+on the next line below.
+
+                    (Continued from previous page)
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH912
)END
./ ADD NAME=AATH913  0100-00027-00027-0921-00033-00033-00000-BC0THOR
)ATTR DEFAULT(%+_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        + TYPE(TEXT)    INTENS(LOW)   COLOR(GREEN)  SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
+AATH913    LOCATING FILE SECTION FIELDS IN THE ABEND-AID DUMP
+NEXT SELECTION ===>_ZCMD  +
+
+To find FILE SECTION data fields in the Abend-Aid dump when you are
+given the DDNAME, BLF cell number, offset, DDNAME, and beginning byte
+number, go to the back of the dump and page upward until you find the
+page headed "Data Management Control Blocks for DDNAME cccccccc",
+where cccccccc is your DDNAME. Now look forward to find the line that
+says "Current record", and the following data is for the BLF cell given.
+This data is formatted much differently than other dump data: a vertical
+CHAR/ZONE/DIGIT format is used, but most inportantly, bytes are numbered
+in decimal beginning with 1. The offset given on the AATP913 panel is
+also given in decimal relative to 1. Locate the byte number and read
+out the data:
+Current Record
+
+xxxxxxxx CHAR cccccccccccccccccccccccccccccccccccccccccccccccccccccc
+         ZONE xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+DIGIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
+1...5...10....*...20....*...30....*...40....*...50....
+
+When reading data in hex, the ZONE digit is read first, followed by the
+DIGIT digit in the same column.
)INIT
.HELP = AATH030
)PROC
  &ZUP = AATH030
)END
./ ADD NAME=AATP000  0103-00024-01037-1108-00044-00035-00000-BC0THOR
)ATTR
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN)
        ! TYPE(TEXT)    INTENS(HIGH)  COLOR(WHITE)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN)
        + TYPE(TEXT)    INTENS(LOW)

)BODY
%AATP000            ABEND AID TOOLS MAIN MENU
%SELECTION ==>_ZCMD
+
!1 @FIND INST -  Finding the Failing Instruction in a COBOL program.
!2 @SUB-PROG  -  When the Abend occurs in a Sub-Program.
!3 @LOCATE FLD-  Locating Fields in the Abend-Aid Dump
!6 @SUBSCRIPT -  Working with Subscripts.
!7 @INDEX     -  Working with Indexes.
!8 @CALC/CONV -  Hexadecimal/Decimal Converter/Calculator.
!9 @INTERPRET -  Interpreting Memory Contents.
+
+
@ An extensive HELP facility is included with this dialog. Please
@ press PF1 when any question arises. This will display a longer
@ message when a short one is displayed, or a screen that contains
@ an explanation of the current panel and its fields.
+
+
!X @EXIT      -  Return to Workbench Master Menu
)INIT
.MSG = AATM001
.HELP = AATH000
&ZPRIM = YES
&ZHTOP = AATH000
)PROC
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                 1,'CMD(AATX010)'
                 2,'CMD(AATX020)'
                 3,'CMD(AATX030)'
                 6,'CMD(AATX060)'
                 7,'CMD(AATX070)'
                 8,'CMD(AATX080)'
                 9,'CMD(AATX090)'
               ' ',' '
                 X,'EXIT'
                 *,'?' )
)END
./ ADD NAME=AATP010  0106-00024-01036-1519-00046-00046-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN)  SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATP010   FINDING THE FAILING INSTRUCTION IN A COBOL PROGRAM
%
@ In the Abend-Aid dump, locate the Next Sequential Instruction Section
@ which should have a statement that says: THE NEXT SEQUENTIAL INSTRUCTION
@ TO BE EXECUTED IN PROGRAM¬program @WAS AT DISPLACEMENT¬abdisp@   Enter
@ the program name and displacement. Also enter completion code:¬comp@
@
@ Next, look down a few lines in the dump and find the statement that says
@ THE PROGRAM WAS COMPILED ON dd mmm yy AND IS nnnnnn BYTES LONG. Enter
@ the length here: ¬pgmlen@
@
@ Now locate the COBOL compile and LINKEDIT listing (footprint) for the
@ abending program. Be sure the length matches the length above.
@
@ In the COBOL Compile listing locate the Condensed Procedure Listing,
@ which immediately follows the Constant Global Table (CGT). It has 3
@ columns across the page, each column having LINE #, HEXLOC, and VERB.
@ Locate the highest HEXLOC that is LOWER than the displacement you
@ wrote down above. The LINE # associated with this HEXLOC is for the
@ instruction that caused the abend. Enter the HEXLOC:¬hexloc@and LINE #
@ ¬lineno@
@
@ Press Enter to retype data. PF3 returns to the main menu. PF1 is HELP
)INIT
.CURSOR = &CURSLOC
.MSG=&ERRMESG
.HELP=AATH010
)PROC
   VER (&PROGRAM,NB)
   VER (&PROGRAM,NAME,MSG=AATM011)
   VER (&ABDISP,NB)
   VER (&ABDISP,HEX,MSG=AATM012)
   VER (&COMP,NB)
   VER (&PGMLEN,NB)
   VER (&PGMLEN,HEX,MSG=AATM012)
   VER (&HEXLOC,NB)
   VER (&HEXLOC,HEX,MSG=AATM012)
   VER (&LINENO,NB)
   VER (&LINENO,NUM,MSG=AATM013)
   VPUT (PROGRAM ABDISP COMP PGMLEN HEXLOC) SHARED
)END
./ ADD NAME=AATP014  0104-01036-01036-1533-00035-00035-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(red) SKIP(ON)
        $ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) CAPS(OFF)
)BODY
@AATP014   ABENDING COBOL PROGRAM STATEMENT FOUND!!
@
@ Locate the COBOL compile listing that matches the dump. To insure
@ you have the correct listing, go to the LinkEdit listing and check
@ to see that the length of program¬program@ is exactly¬pgmlen@ bytes
@ long.
@
@ Now go to statement number¬lineno@ in the COBOL compile listing. This
@ is the statement that caused the abend. Quite often the problem will
@ be obvious when this statement is found and read.
@
@ If additional information is required, please refer to other pages
@ in this dialog.
@
@
@
@
@
@
@
@
@
@ Press Enter or PF3 to continue
)INIT
.HELP = AATH010
.CURSOR = &CURSLOC
.MSG = &ERRMESG
)PROC
)END
./ ADD NAME=AATP020  0102-00024-00027-0806-00032-00031-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATP020              ABENDS IN CALLED SUBROUTINES
@
@ When the abend occurs in a called program, it is often caused by the
@ calling program passing incorrect parameters. To find the CALL statement
@ that invoked the subroutine, go to the Abend-Aid dump and look for the
@ CALL TRACE SUMMARY. Find the subroutine in the *****CALLED***** column.
@ On that line in the *****CALLING***** column you see the name of the
@ program that called the subroutine. In the ***RETURN*** column is the
@ DISPlacement from the beginning of the program to the CALL statement that
@ invoked the subroutine. Write down the Calling program name and displa-
@ cement and use them on the "Finding the Failing Instruction in a COBOL
@ Program" in this dialog. You will need the COBOL compile and linkedit
@ listing for the calling program, of course.
@
@ Things to look for in the calling program:
@   1. Were the right number of parameters passed?
@   2. Are the parameters passed in the same order as expected by the
@      called subroutine?
@   3. Are the parameters defined the same (data type, length)?
@   4. Do the fields passed to the called subroutine contain valid data?
@
@
@
)INIT
.HELP = AATH000
)PROC
)END
./ ADD NAME=AATP030  0102-00024-00026-1640-00054-00054-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATP030             LOCATING FIELDS IN THE ABEND-AID DUMP
@
@
@ If the field you wish to find is subscripted or indexed, you will have
@ to use Main Menu choice 6 or 7 and get their displacement(s) first.
@
@ In the COBOL compile listing, locate the data field you want to find in
@ the dump and enter the following data for the field:
@    Field Name:   ¬fldname                       @
@    Data Type:    ¬z@       P=COMP-3, B=COMP, Z=PIC 9 no COMP, C=all else
@    BL Cell Type: ¬z@       F=BLF, W=BLW, L=BLL
@    BL Cell Nbr:  ¬z   @    Hex value
@    BL Offset:    ¬z  @     Hex value
@    Field length: ¬fldlen@  Decimal value
@    DDNAME:       ¬ddname  @Required when BL Cell Type is F
@    Sub/Indx Off: ¬subidx@  Blank when field is neither subscripted nor
@                            indexed. When the field is subscripted, get
@                            the value from Main Menu option 6. When the
@                            field is indexed, get the value from Main
@                            Menu option 7. If two subscripts/indexes are
@                            used, enter the sum of offsets. Value is hex.
@
@ Press Enter to continue or PF3 to return to the main menu. PF1 for HELP
)INIT
.ZVARS = '(FLDTYPE,BLCELLTY,BLCELLNO,BLOFF)'
.CURSOR = &CURSLOC
.MSG = &ERRMESG
.HELP = AATH030
VGET (PROGRAM) SHARED
)PROC
   VER (&FLDNAME,NB)
   VER (&FLDTYPE,NB)
   VER (&FLDTYPE,LIST,P,B,Z,C,MSG=AATM032)
   VER (&BLCELLTY,NB)
   VER (&BLCELLTY,LIST,F,W,L,MSG=AATM038)
   VER (&BLCELLNO,NB)
   VER (&BLCELLNO,HEX,MSG=AATM033)
   VER (&BLOFF,NB)
   VER (&BLOFF,HEX,MSG=AATM033)
   VER (&FLDLEN,NB)
   VER (&FLDLEN,NUM,MSG=AATM034)
   VER (&FLDLEN,RANGE,1,32,MSG=AATM030)
   IF (&BLCELLTY = 'F')
      VER(&DDNAME,NB)
   VER (&DDNAME,NAME,MSG=AATM031)
   VER (&SUBIDX,HEX,MSG=AATM033)
   VPUT (FLDNAME FLDTYPE BLCELLTY BLCELLNO) SHARED
   VPUT (BLOFF FLDLEN DDNAME SUBIDX) SHARED
)END
./ ADD NAME=AATP034  0105-00024-00027-1422-00037-00035-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        $ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) CAPS(OFF)
)BODY
@AATP034   VALIDATION OF DUMP DATA FIELD CONTENT
@
@     Field Name:   %fldname                       @
@     Data Type:    %datatype@
@    ¬bl @Cell:     %z   @   Hex value
@     BL Offset     %z  @    Hex value
@     Length:       %fldlen@ Decimal value
@
@     Hex Content:  %hexdata                         @
@
@     Decimal Value:%decval                          @
@
@     CHAR$char            @
@     ZONE%zone            @
@     NUM %num             @
@
@
@
@
@
@
@
@ Press Enter or PF3 to continue
)INIT
.HELP = AATH030
.ZVARS = '(BLCELLNO,BLOFF)'
.CURSOR = &CURSLOC
.MSG = &ERRMESG
&DATATYPE = TRANS (&FLDTYPE B,BINARY C,CHARACTER P,PACKED Z,ZONED)
)PROC
)END
./ ADD NAME=AATP060  0102-00024-01033-1113-00059-00059-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(WHITE) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATP060                   WORKING WITH SUBSCRIPTS
@
@ A subscript is an ordinary numeric data field that contains an occurrence
@ number beween 1 and the maximum number of occurrences in a table. This
@ panel derives the decimal occurrence number and total hex displacement
@ for the value currently contained in a subscript.
@
@ In the the COBOL compile listing, locate the subscript field you want to
@ find in the dump and enter the following data for it:
@      Field Name:            ¬fldname                       @
@      Data Type:             ¬z@       P=COMP-3, B=COMP, Z=PIC 9 no COMP
@      BL Cell Type:          ¬z@       F=BLF, W=BLW, L=BLL
@      BL Cell Nbr:           ¬z   @    Hex value
@      BL Offset:             ¬z  @     Hex value
@      Subscript field length:¬fldlen@  Decimal value
@      DDNAME:                ¬ddname  @DDNAME if BL Cell Type = F
@      Occurring Field Length:¬occlen @ Decimal value
@      Number of Occurs:      ¬occnbr@  Decimal value
@ The total length value due to the subscript must be entered on the
@ Subscript/Index Offset field of the location panel (choice 3, 4, or 5
@ from the Main Menu). If there are two subscripts, sum their values.
@
@ Press Enter to continue or PF3 to return to the main menu.
)INIT
.ZVARS = '(FLDTYPE,BLCELLTY,BLCELLNO,BLOFF)'
.CURSOR = &CURSLOC
.MSG = &ERRMESG
.HELP = AATH060
VGET (PROGRAM) SHARED
)PROC
   VER (&FLDNAME,NB)
   VER (&FLDTYPE,NB)
   VER (&FLDTYPE,LIST,P,B,Z,MSG=AATM062)
   VER (&BLCELLTY,NB)
   VER (&BLCELLTY,LIST,F,W,L,MSG=AATM068)
   VER (&BLCELLNO,NB)
   VER (&BLCELLNO,HEX,MSG=AATM063)
   VER (&BLOFF,NB)
   VER (&BLOFF,HEX,MSG=AATM063)
   VER (&FLDLEN,NB)
   VER (&FLDLEN,NUM,MSG=AATM064)
   VER (&FLDLEN,RANGE,1,32,MSG=AATM060)
   VER (&DDNAME,NAME,MSG=AATM061)
   IF (&BLCELLTY = 'F')
      VER (&DDNAME,NB)
   VER (&DDNAME,NAME,MSG=AATM061)
   VER (&OCCLEN,NB)
   VER (&OCCLEN,NUM,MSG=AATM064)
   VER (&OCCNBR,NB)
   VER (&OCCNBR,NUM,MSG=AATM064)
   VER (&SUBIDX,HEX,MSG=AATM063)
   VPUT (FLDNAME FLDTYPE BLCELLTY BLCELLNO) SHARED
   VPUT (BLOFF FLDLEN DDNAME OCCLEN OCCNBR) SHARED
)END
./ ADD NAME=AATP064  0104-00024-00027-1423-00037-00035-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(WHITE) SKIP(ON)
        $ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) CAPS(OFF)
)BODY
@AATP064      VALIDATION/EXPANSION OF SUBSCRIPT FIELD CONTENT
@
@     Subscript Name:%fldname                       @
@     Data Type:     %datatype@
@    ¬bl @Cell:      %z   @   Hex value
@     BL Offset      %z  @    Hex value
@     Length:        %fldlen@ Decimal value
@
@     Hex Content:   %hexdata                         @ Hex value in dump
@
@     CHAR$char            @
@     ZONE%zone            @
@     NUM %num             @
@
@     Decimal Value:           ¬decval          @ Occurrence Nbr
@     Number Occurs:           %occnbr@           Decimal value
@     Length of Occurring Item:%occlen@           Decimal value
@     Offset due to Subscript: ¬suboff@ Hex offset from the beginning of the
@                                       table to the specified table entry.
@                                       Copy to the Sub/Indx Off field of
@                                       Main Menu choice 3 panel AATP030.
@
@ Press Enter or PF3 to continue
)INIT
.HELP = AATH060
.ZVARS = '(BLCELLNO,BLOFF)'
.CURSOR = &CURSLOC
.MSG = &ERRMESG
&DATATYPE = TRANS (&FLDTYPE B,BINARY C,CHARACTER P,PACKED Z,ZONED)
)PROC
)END
./ ADD NAME=AATP070  0100-00024-00024-1409-00043-00043-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(WHITE) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATP070                   WORKING WITH INDEXES
@
@ An index is a 4-byte binary data field that is created by COBOL when the
@ INDEXED BY clause is specified on a data item. The index contains the
@ total number of bytes from the beginning of the table to the table element
@ it refers to. This differs from a subscript, which contains an occurrence
@ number.
@
@ In the the COBOL compile listing, locate the index field you want to
@ find in the dump and enter the following data for it:
@      Index Name:            ¬fldname                       @
@      COBOL IDX Number:      ¬idx @    Hex value from IDX=
@      Occurring Field Length:¬occlen @ Decimal value from occurring field
@      Number of Occurs:      ¬occnbr@  Decimal value from OCCURS nnn TIMES
@
@ The total length value due to the index must be entered on the
@ Subscript/Index Offset field of the Main Menu choice 3, panel AATP030
@ If there are two indexes, sum their values.
@
@
@
@
@ Press Enter to continue, PF3 to return to the main menu or PF1 for Help
)INIT
.CURSOR = &CURSLOC
.MSG = &ERRMESG
.HELP = AATH070
VGET (PROGRAM) SHARED
)PROC
   VER (&FLDNAME,NB)
   VER (&IDX,NB)
   VER (&IDX,HEX,MSG=AATM071)
   VER (&OCCLEN,NB)
   VER (&OCCLEN,NUM,MSG=AATM072)
   VER (&OCCNBR,NB)
   VER (&OCCNBR,NUM,MSG=AATM072)
   VPUT (FLDNAME IDX OCCLEN OCCNBR) SHARED
)END
./ ADD NAME=AATP071  0103-00024-00027-0809-00036-00035-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)
        $ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
@AATP071              LOCATING INDEX VALUES IN THE ABEND-AID DUMP
@
@
@ Go to the Abend-Aid dump and locate the beginning of your program's
@ data, which will be in a box headed: DATA DIVISION OF PROGRAM¬program @
@
@ Go forward past the WORKING STORAGE REFERENCED by pages until you find
@ the SUPPORTING DATA page, which contains contents of BLW cells, BLL
@ cells, BLF cells, and index cells. Locate the content of the index
@ cell identified as IDX  ¬z  .@Note that this is one less than the
@ COBOL IDX number due to differences in the ways COBOL and Abend-aid
@ count.
@
@ Enter the four-byte content of the index cell, which is 8 hex digits:
@ $hexdata @
@
@
@
@
@
@
@ Press Enter to continue or PF3 to return to the main menu.
)INIT
.HELP = AATH070
.ZVARS = '(ABIDX)'
.MSG = &ERRMESG
)PROC
   VER (&HEXDATA,HEX,MSG=AATM074)
   VPUT (HEXDATA) SHARED
)END
./ ADD NAME=AATP074  0103-00024-00027-0809-00035-00034-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(OUTPUT)  INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)  COLOR(WHITE) SKIP(ON)
)BODY
@AATP074               INDEX CONTENT VALIDATION
@
@     Index Name:         %fldname                       @
@     COBOL Index Number  %idx @   Hex value
@     Abend-Aid Index nbr %z  @    Hex value
@
@     Hex Content:   %hexdata                         @ Hex value in dump
@
@     Equivalent Occurrence No:¬decval          @ Decimal value
@     Number Occurs:           %occnbr@           Decimal value
@     Length of Occurring Item:%occlen@           Decimal value
@     Offset due to Index:     ¬suboff  @ Hex offset from the start of the
@                                       table to the specified table entry.
@                                       Copy to the Sub/Indx Off field of
@                                       Main Menu choice 3 panel AATP030.
@
@
@
@
@
@
@
@ Press Enter or PF3 to continue
)INIT
.HELP = AATH070
.ZVARS = '(ABIDX)'
.CURSOR = &CURSLOC
.MSG = &ERRMESG
)PROC
)END
./ ADD NAME=AATP080  0103-00024-00027-0941-00056-00055-00000-BC0THOR
)ATTR DEFAULT(%@_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(green) SKIP(ON)
        _ TYPE(INPUT)   INTENS(HIGH)
        # TYPE(OUTPUT)  INTENS(HIGH)  SKIP(ON)

)BODY
%AATP080         ABEND AID TOOLS HEX/DECIMAL CALCULATIONS
%
%
@ To convert from decimal to hex, or hex to decimal, leave the operation
@ field (Op) blank, and enter the known number in the 1st Number column.
@
@ For calculations, the Operation field (Op) must contain a + for
@ addition, a - for subtraction, a * for multiplication, or a / for
@ division. Enter one number in the 1st Number column, and one in the
@ second column.
@
@ Only whole numbers can be entered (no decimal points or commas). The
@ allowed decimal number range is -2,147,483,648 to +2,147,483,647. For
@ hex numbers, the range is 00000000 to FFFFFFFF.
%
%
% 1st Number           Operation   2nd Number
% Hex _h1      %           _z%     Hex _h2      %                       %
% Dec _d1                 %        Dec _d2            %                       %
%
%
%
% Press Enter for calculation. PF3 returns to the previous screen.
)INIT
.ZVARS = '(OP)'
.CURSOR = &CURSLOC
.MSG=&ERRMESG
.HELP = AATH080
)PROC
   VER (&D1,ENUM,MSG=AATM081)
   VER (&D2,ENUM,MSG=AATM081)
   VER (&H1,HEX,MSG=AATM082)
   VER (&H2,HEX,MSG=AATM082)
   VER (&OP,LIST,' ','+','-','*','/',MSG=AATM083)
IF (&H1 = '')
    IF (&D1 = '')
        .MSG=AATM084
ELSE
    IF (&D1 ¬= '')
        .MSG=AATM085
IF (&OP ¬= '')
   IF (&H2 = '')
       IF (&D2 = '')
           .MSG=AATM086
   ELSE
       IF (&D2 ¬= '')
           .MSG=AATM087
   VPUT (D1 H1 OP D2 H2) SHARED
)END
./ ADD NAME=AATP081  0103-00024-00027-0945-00034-00033-00000-BC0THOR
)ATTR DEFAULT(%@_)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        # TYPE(OUTPUT)  INTENS(HIGH)  SKIP(ON)

)BODY
%AATP081         ABEND AID TOOLS HEX/DECIMAL CALCULATION RESULTS
%SELECTION ==>_ZCMD
%
%
%
% 1st Number           Operation   2nd Number              Result
% Hex #h1      %           #z%     Hex #h2      %     % =  Hex #hr      %
% Dec #d1                 %        Dec #d2            % =  Dec #dr            %
%
%
%
%
%
%
%
%
%
%
%
%
%
%
% Press Enter for clear calculation screen, PF3 to return to main menu.
)INIT
.ZVARS = '(OP)'
.MSG=&errmesg
.HELP = AATH080
)PROC
)END
./ ADD NAME=AATP090  0104-00024-00027-0810-00018-00017-00000-BC0THOR
)ATTR DEFAULT(%+_)
      % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)
      + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)
      _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(_)
      ¬ TYPE(INPUT)  INTENS(HIGH) CAPS(ON) JUST(LEFT)
      $ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY
%AATP090------------- Code Conversion Chart ------------------------------------
+Command%===>¬ZCMD                                            +Scroll%===>_SAMT+
%Sel DEC HEX  -BINARY--  EBCDIC    ASCII    INSTR +
+--- ---  --  ---- ----  --------  -------  ----- +
)MODEL
_S  $DEC $HX $BINARY    $EBCDIC   $ASCII   $INSTR
)INIT
&s = ''
.HELP = AATH090
)PROC
)END
./ ADD NAME=AATP911  0104-00024-00027-0813-00038-00037-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)
        $ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATP911   LOCATING FIELDS IN WORKING STORAGE AREAS (BLW CELLS)
%
%
@ The field named ¬fldname                         @
@ can be found in the Abend-Aid Dump at BLW Cell ¬z   @+ offset ¬z     @
@
@ Go to the Abend-Aid dump and locate the beginning of your program's
@ data, which will be in a box headed: DATA DIVISION OF PROGRAM¬program @
@
@ Go forward to find the line: WORKING STORAGE REFERENCED BY BLW CELL¬z   @
@
@ Now locate the data line whose offset (DSPL column) value is:¬z     @
@
@ The field will begin in DATA column number ¬z@ on that line. When
@ counting data columns, remember that the first two columns are
@ displacement and address, NOT data. The THIRD column is DATA column 1.
@
@ Your¬datatype@field begins in byte number ¬z@in the data column, and is
@ ¬fldlen@bytes long. Remember that one byte is two hex digits. For a
@ validity check of the data, enter the value from the dump, 2 hex digits
@ per byte:$hexdata                         @
@
@ Press Enter to continue, PF3 to return, or PF1 for HELP.
)INIT
.HELP = AATH911
.ZVARS = '(BLCELLNO TOTLOFST TOTBLCEL LINEOFST NBRCOLS BYTEOFST)'
.MSG = &ERRMESG
&DATATYPE = TRANS (&FLDTYPE B,BINARY C,CHARACTER P,PACKED Z,ZONED)
)PROC
   VER (&HEXDATA,HEX,MSG=AATM911A)
   VPUT (HEXDATA) SHARED
)END
./ ADD NAME=AATP912  0104-00024-00027-0813-00038-00037-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)
        $ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATP912   LOCATING FIELDS IN LINKAGE SECTION AREAS (BLL CELLS)
%
%
@ The field named ¬fldname                         @
@ can be found in the Abend-Aid Dump at BLL Cell ¬z   @+ offset ¬z     @
@
@ Go to the Abend-Aid dump and locate the beginning of your program's data,
@ which will be in a box headed: DATA DIVISION OF PROGRAM¬program @
@
@ Go forward to find the line: LINKAGE STORAGE REFERENCED BY BLL CELL¬z   @
@
@ Now locate the data line whose offset (DSPL column) value is:¬z     @
@
@ The field will begin in DATA column number ¬z@ on that line. When
@ counting data columns, remember that the first two columns are
@ displacement and address, NOT data. The THIRD column is DATA column 1.
@
@ Your¬datatype@field begins in byte number ¬z@in the data column, and is
@ ¬fldlen@bytes long. Remember that one byte is two hex digits. For a
@ validity check of the data, enter the value from the dump, 2 hex digits
@ per byte:$hexdata                         @
@
@ Press Enter to continue, PF3 to return, or PF1 for HELP
)INIT
.ZVARS = '(BLCELLNO TOTLOFST TOTBLCEL LINEOFST NBRCOLS BYTEOFST)'
.MSG = &ERRMESG
&DATATYPE = TRANS (&FLDTYPE B,BINARY C,CHARACTER P,PACKED Z,ZONED)
.HELP = AATH912
)PROC
   VER (&HEXDATA,HEX,MSG=AATM911A)
   VPUT (HEXDATA) SHARED
)END
./ ADD NAME=AATP913  0104-00024-00027-0814-00038-00037-00000-BC0THOR
)ATTR DEFAULT(%@¬)
        % TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        @ TYPE(TEXT)    INTENS(HIGH)  COLOR(GREEN) SKIP(ON)
        ¬ TYPE(OUTPUT)  INTENS(HIGH)
        $ TYPE(INPUT)   INTENS(HIGH)  PAD('_')
)BODY
%AATP913   LOCATING FIELDS IN A RECORD IN AN FD (BLF CELLS)
%
%
@ The field named ¬fldname                         @
@ can be found in the Abend-Aid Dump at BLF Cell ¬z   @+ offset ¬z     @
@
@ Go to the back of the Abend-Aid dump and page backward to find the page
@ headed: DATA MANAGEMENT CONTROL BLOCKS FOR DDNAME¬ddname  @
@
@ From there, search forward to find the line that says: CURRENT RECORD
@
@ The content of the record is shown  in three lines with character values
@ on the top line, hexadecimal zone values on the next line, and hexadeci-
@ mal numeric values on the third line. Below the third line is a locator
@ bar showing byte numbers across the line in decimal relative to 1.
@
@ Your¬datatype@field begins in byte number ¬z     @ (decimal) and is ¬fldlen@
@ bytes long. Each column is one byte and the first column is column 1.
@
@ For a validity check of the data, enter the value from the dump, 2 hex
@ digits per byte (types P, B, and Z only):$hexdata                         @
@
@ Press Enter to continue, PF3 to return, or PF1 for HELP.
)INIT
.HELP = AATH913
.ZVARS = '(BLCELLNO TOTLOFST BYTEOFST)'
.MSG = &ERRMESG
&DATATYPE = TRANS (&FLDTYPE B,BINARY C,CHARACTER P,PACKED Z,ZONED)
)PROC
   VER (&HEXDATA,HEX,MSG=AATM911A)
   VPUT (HEXDATA) SHARED
)END
./ ADD NAME=CBC3GIS2 0100-00250-00250-1151-00019-00019-00000-BC0THOR
)ATTR DEFAULT(%+_)
/* this menu is used by the ISPF example */
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */

)BODY
%---------------------  SAMPLE ISPF DIALOG  PANEL  -----------------------------
%OPTION ===>_ZCMD                                                              +
+
+  %1+ SELECTION 1      CALL C PROGRAM.
   %2+ FUTURE           NOT IMPLEMENTED.
   %3+ FUTURE           NOT IMPLEMENTED.
+
+ENTER %END+COMMAND TO TERMINATE.
)PROC
   &ZSEL=TRANS(TRUNC(&ZCMD,'.')
             1,'PGM(CBC3GIS3)'
             *,'?')
)END
./ ADD NAME=CBC3GIS4 0100-00250-00250-1140-00021-00021-00000-BC0THOR
)ATTR DEFAULT(%+_)
/* this menu is used by the ISPF example */
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for    */
      /*  + TYPE(TEXT) INTENS(LOW)       information only*/
      /*  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)           */
)BODY
%------------------------  A SAMPLE ISPF MENU ------------------------
%OPTION ===>_ZCMD
+
+  %1+ SELECTION 1      NOT IMPLEMENTED.
   %2+ SELECTION 2      EXIT

+   %END+ TO EXIT.
+
)INIT
  .HELP = cbc3gis5
)PROC
   &ZSEL=TRANS(TRUNC(&ZCMD,'.')
         2,'EXIT'
         *,'?')
)END
./ ADD NAME=CBC3GIS5 0100-00250-00250-1141-00009-00009-00000-BC0THOR
)ATTR DEFAULT(%+_)
/* this panel is used by the ISPF example */
)BODY
%---------------------  Sample Ispf Help Panel  --------------------------------
+
   This is a HELP panel.  Enter %END +to exit.

)PROC
)END
./ ADD NAME=CBC3GIS7 0100-00250-00250-1142-00019-00019-00000-BC0THOR
)ATTR DEFAULT(%+_)
/* this menu is used by the ISPF example */
      /*  % TYPE(TEXT) INTENS(HIGH)      defaults displayed for      */
      /*  + TYPE(TEXT) INTENS(LOW)       information only            */

)BODY
%---------------------  SAMPLE ISPF DIALOG  PANEL  -----------------------------
%OPTION ===>_ZCMD                                                              +
+
+  %1+ SELECTION 1      CALL C PROGRAM.
   %2+ FUTURE           NOT IMPLEMENTED.
   %3+ FUTURE           NOT IMPLEMENTED.
+
+ENTER %END+COMMAND TO TERMINATE.
)PROC
   &ZSEL=TRANS(TRUNC(&ZCMD,'.')
             1,'PGM(CBC3GIS8)'
             *,'?')
)END
./ ADD NAME=C1SD1000 0101-01065-01065-1804-00042-00042-00000-BC0THOR
)ATTR DEFAULT(%+_)
       /* % TYPE(TEXT) INTENS(HIGH)      DEFAULTS DISPLAYED FOR      */
       /* + TYPE(TEXT) INTENS(LOW)       INFORMATION ONLY            */
       /* _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)             */
   $ TYPE(INPUT) INTENS(LOW) PAD(_)      /* UNIQUE ATTRIBUTES FOR   */
   ! TYPE(INPUT) INTENS(LOW) PAD(NULLS)  /* DASHES AND NULL PADDING */
   ¢ TYPE(OUTPUT) INTENS(HIGH) JUST(RIGHT)
   | TYPE(OUTPUT) INTENS(LOW)
   ¬ TYPE(INPUT) CAPS(&VARCACCI) FORMAT(&VARFMCCI)
   ` TYPE(INPUT) CAPS(&VARCACOM) FORMAT(&VARFMCOM)
   ~ TYPE(INPUT) CAPS(&VARCADES) FORMAT(&VARFMDES)
)BODY
%-------------------  Display Elements/Component Lists  ------------------------
%OPTION  ===>_ZCMD                                                             +
+
%   blank+- Display selection list     %B+- Browse element current level
%   S+- Display summary of levels      %C+- Display changes current level
%   M+- Display element master info    %H+- Display history current level
+
+   Enter%SX, BX, CX+or%HX+to display component list information
+
+                                    LIST OPTIONS:
+FROM ENDEVOR:                          DISPLAY PROC GRP NAME%===>_Z+ (Y/N)
+  ENVIRONMENT%===>_VAREVNME+           DISPLAY LIST         %===>_Z+ (Y/N)
+  SYSTEM     %===>_SYS     +           WHERE CCID EQ        %===>¬VARWHCCI    +
+  SUBSYSTEM  %===>_SBS     +   +       WHERE PROC GRP EQ    %===>_VARWPGRP+
+  ELEMENT    %===>_CIELM     +         DISPLAY SYS/SBS LIST %===>_H+ (Y/N)
+  TYPE       %===>_TYPEN   +           BUILD USING MAP      %===>_Z+ (Y/N)
+  STAGE      %===>_D+     ¢CLU1I+-|CLU1ID  ¢CLU2I+-|CLU2ID
+
+
+
+
+
+
+
)INIT
  .HELP = CITD1000
  .ZVARS = '(VARDPGRP VARWKLST VARSHMAP)'
  &VARDPGRP = 'Y'
)PROC
)END
./ ADD NAME=DMMMAIN  0101-99361-99361-1238-00045-00045-00000-BC0THOR
)ATTR
        % TYPE(TEXT)    INTENS(HIGH)
        ! TYPE(TEXT)    INTENS(HIGH)  color(white)
        @ TYPE(TEXT)    INTENS(HIGH)  color(turq)
        + TYPE(TEXT)    INTENS(LOW)   color(blue)
        # TYPE(OUTPUT)  INTENS(HIGH)
        _ TYPE(INPUT)   PAD(_)

)BODY expand(\\)
%-\-\-  Automated Systems Interface -\-\-
%SELECTION ==>_ZCMD  +  %&ERPO
+
@1 OPSLOG+
@2 Operators Information+
  !2.1+Alpha Pager         !2.4+OPS/MVS Messages    !2.7+IMS Location Inquiry
  !2.2+Endevor Archives Rpt!2.5+OPS/MVS Commands    !2.8+Broad Cast Editor
  !2.3+Defined Applications!2.6+ISD Oncall          !2.9+Phone List
@3 Operators Assistance+
  !3.1+Technical Lib       !3.4+Date Verify         !3.7+Paging Interface+
  !3.2+Oper Commands       !3.5+IMS/AOI End Times   !3.8+AOI Information+
  !3.3+PDS Search          !3.6+Not Available       !3.9+IPL/Shutdown graph
@4 Automation Control Services+
  !4.1+TOD Overrides       !4.3+Service Level       !4.5+Initiator Schedule+
  !4.2+Holidays            !4.4+Not Available       !4.6+Partial Shutdown+
@5 Network Control Functions+
  !5.1+Distributed Alerts  !5.4+Printers            !5.7+JES Lines+
  !5.2+IMS Regions         !5.5+NJE Lines           !5.8+Cross Domains+
  !5.3+CICS Regions        !5.6+IMS Trans Globals   !5.9+IMS Trans Abends+
@6 OPS/MVS Team Options+
  !6.1+Global Search       !6.4+DMM Activity        !6.7+Oncall Maintenance+
  !6.2+ID Generator        !6.5+Not Available       !6.8+Restore SQL Tables+
  !6.3+DMM Security        !6.6+Application Globals !6.9+SQL Search+
)INIT
)PROC
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                 1,'CMD(OB)'
                 2,'PANEL(DMM2)'
                 3,'PANEL(DMM3)'
                 4,'Panel(DMM4)'
                 5,'panel(DMM5)'
                 6,'panel(DMM6)'
               ' ',' '
                 X,'EXIT'
                 *,'?' )
)END
./ ADD NAME=DMM2     0100-99361-99361-1240-00035-00035-00000-BC0THOR
)ATTR
        % TYPE(TEXT)    INTENS(HIGH)
        + TYPE(TEXT)    INTENS(LOW)   SKIP(OFF)
        # TYPE(OUTPUT)  INTENS(HIGH)
        _ TYPE(INPUT)   PAD(_)

)BODY expand(\\)
%-\-\-  Operators Information -\-\-
+%Selection ==>_Zcmd + %&ER2
+
+
+              %1+-->%Alpha Numeric Pager system
+              %2+-->%Endevor Archives Report
+              %3+-->%Browse Automation components
+              %4+-->%Browse Messages and Codes
+              %5+-->%Browse Automation Commands
+              %6+-->%Browse OPS/MVS On-Call
+              %7+-->%IMS Location Inquiry
+              %8+-->%Broad Cast Editor Utility
+              %9+-->%Phone List
)INIT
)PROC
  &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                 1,'CMD(OI DMM2100P)'
                 2,'CMD(OI DMM2200P)'
                 3,'CMD(OI DMM2300P)'
                 4,'CMD(OI DMM2400P MESSAGES)'
                 5,'CMD(OI DMM2400P COMMANDS)'
                 6,'CMD(OI DMM2600P)'
                 7,'CMD(OI DMM2700P)'
                 8,'CMD(OI DMM2800P)'
                 9,'CMD(OI DMM2900P)'
               ' ',' '
                 *,'?' )
)END
./ ADD NAME=SMPE0    0102-99041-00192-1645-00078-00001-00000-BC0THOR
)ATTR
   ¬ TYPE(TEXT)    INTENS(HIGH)    COLOR(WHITE)
   % TYPE(TEXT)    INTENS(HIGH)    COLOR(YELLOW)
   + TYPE(TEXT)    INTENS(LOW)     COLOR(TURQ)
   # TYPE(TEXT)    INTENS(LOW)     COLOR(BLUE)
   _ TYPE(INPUT)   INTENS(HIGH)    COLOR(PINK)
   @ TYPE(INPUT)   INTENS(NON)
)BODY
¬----------------------* SMP/E Global Zone Selection *--------------------------
+¬COMMAND ===>_ZCMD                                                            +
+                                                                              +
+        %1 #MVS/ESA    -+MVS/ESA¬5.1.0+and all other IBM products except:     +
+        %2 #COBOL II   -  +VS COBOL II¬1.4.0+                                 +
+        %3 #LE/MVS     -  +Language Environment/MVS¬1.5.0+                    +
+        %4 #PL/I       -  +PL/I¬2.3.0+                                        +
+        %5 #HL/ASM     -  +HL/ASM¬1.2.0                                       +
+                                                                              +
+        %7 #E-Helpdesk -+E-PRF¬1.1                                            +
+        %8 #SPS        -+SPS¬3.2.0+                                           +
+        %9 #CAI        -+Computer Associates, all products, except:           +
+        %10#NETMAN     -  +CA-NETMAN¬4.9.0+                                   +
+        %11#VIEW       -  +CA-VIEW V¬2.0+                                     +
+                                                                              +
+        %13#TMON/MVS   -+Landmark Systems                                     +
+                                                                              +
+                                                                              +
+    Use the%number+to select the SMP/E Global Zone desired.                   +
+                                                                              +
+   Press the%END+key to exit.                                                 +
)INIT
  .CURSOR = ZCMD
 &ZCMD = &Z
 VGET (GPMSTCSI) PROFILE
)PROC
  IF (&ZCMD = 1)
    &GPMSTCSI = '''SMPE.GLOBAL.CSI'''
  IF (&ZCMD = 2)
    &GPMSTCSI = '''SPP.COB4.SMPCSI.CSI'''
  IF (&ZCMD = 3)
    &GPMSTCSI = '''SPP.LEMVS.R150.SMPCSI.CSI'''
  IF (&ZCMD = 4)
    &GPMSTCSI = '''SPP.PLI230.CSI'''
  IF (&ZCMD = 5)
    &GPMSTCSI = '''SPP.HLASM.SMPE.CSI'''
  IF (&ZCMD = 7)
    &GPMSTCSI = '''SPP.EHELP.CSI'''
  IF (&ZCMD = 8)
    &GPMSTCSI = '''SPP.SPS320.CSI'''
  IF (&ZCMD = 9)
    &GPMSTCSI = '''CAI.SMPECSI.CSI'''
  IF (&ZCMD = 10)
    &GPMSTCSI = '''SPP.NETMAN.SMPCSI.CSI'''
  IF (&ZCMD = 11)
    &GPMSTCSI = '''SPP.VIEW.V20.SMPCSI.CSI'''
  IF (&ZCMD = 13)
    &GPMSTCSI = '''SPP.TMONMVS.CSI'''
 VPUT (GPMSTCSI) PROFILE
 &ZSEL = TRANS( TRUNC (&ZCMD,'.')
                1,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                2,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                3,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                4,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                5,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                6,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                7,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                8,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                9,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               10,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               11,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               12,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               13,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               14,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
               15,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK'
                X,'EXIT'
              ' ',' '
               *,'?' )
 &ZTRAIL = .TRAIL
)END
