/*REXX*****************************************************************/
/*  NAME      -  AATX030                                              */
/*  PROJECT   -  ABEND-AID TOOLS (AAT)                                */
/*  TYPE      -  REXX PROGRAM                                         */
/*  FUNCTION  -  DISPLAYS PANEL AATP030 TO COLLECT INFORMATION ON THE */
/*               WORKING STORAGE FIELD TO BE LOCATED AND VALIDATED IN */
/*               THE DUMP. USER ENTERS DATA SUCH AS FIELD NAME, BL    */
/*               CELL TYPE, BL CELL NUMBER, BL CELL OFFSET, DATA TYPE,*/
/*               FIELD LENGTH, DDNAME (FOR BLF CELLS), AND OFFSET DUE */
/*               TO ANY SUBSCRIPT OR INDEX. WHEN DATA ENTERED ON THE  */
/*               AATP030 SCREEN IS CORRECT, PANEL AATP911 IS SHOWN    */
/*               FOR BLW CELLS, PANEL AATP912 IS SHOWN FOR BLL CELLS, */
/*               OR PANEL AATP913 IS SHOWN FOR BLF CELLS. THESE PANELS*/
/*               TELL THE USER HOW TO FIND THE FIELD IN MEMORY, AND   */
/*               OBTAINS THAT VALUE FROM THE USER. FINALLY, THE       */
/*               AATP034 PANEL IS DISPLAYED TO ANALYZE FIELD CONTENT  */
/*  CALLED BY -  PANEL AATP000                                        */
/*  RELATED   -  PANELS AATP911-AATP913, AATH030, AND MSG AATM03      */
/*  CALLS     -  AATX034                                              */
/*  AUTHOR    -  DICK THORNTON JAN 2000                               */
/**********************************************************************/
/**********************************************************************/
/*  THE PROGRAM RUNS IN A NEVER ENDING LOOP UNTIL THE USER HITS PF3   */
/*  1. INITIALIZE VARIABLES.                                          */
/*  2. DISPLAY THE AATP030 PANEL TO OBTAIN THE FIELD VARIABLE INFO.   */
/*  3. ON RETURN FROM PANEL AATP030, EXIT IF THE USER HAS HIT PF3.    */
/*  4. VALIDATE THE USER SUPPLIED VARIABLES. IF ANY ERROR OCCURS,     */
/*     REDISPLAY AATP030 WITH AN ERROR MESSAGE AND THE CURSOR SET ON  */
/*     THE FIELD IN ERROR.                                            */
/*  5. SET UP VARIABLES FOR THE AATP911, AATP912, OR AATP913 PANEL    */
/*  6. DISPLAY THE AATP911-AATP913 TO SHOW THE RESULTS TO THE USER.   */
/*  7. ON RETURN DISPLAY PANEL AATP034 TO SHOW DATA ANALYSIS.         */
/*  8. REPEAT STEPS 1-9.                                              */
/**********************************************************************/
/* TRACE ?ALL */
NUMERIC DIGITS 32             /* SET NUMBER DIGITS FOR CALCULATIONS */
DO FOREVER
   FLDNAME = ''; FLDTYPE = ' '; BLCELLTY = ' '; BLCELLNO = '';
   BLOFF = ''; FLDLEN = ''; DDNAME = ''; SUBIDX = ''; HEXDATA = '';
   ERROR = 1; ERRMESG = ''; CURSLOC = 'FLDNAME'
   DO FOREVER
      ADDRESS ISPEXEC 'DISPLAY PANEL(AATP030)'
      IF RC ¬= 0 THEN EXIT    /* ASSUME PF3 HIT OF RC IS NOT 0 */
      ERROR = 0; ERRMESG = ''; CURSLOC = 'FLDNAME'
      CALL VALIDATE           /* VALIDATE PANEL VARIABLES */
      IF ERROR ¬= 0 THEN ITERATE /* IF ERROR, RE-DISPLAY AATP030 */
      HEXDATA = ''
      DO FOREVER
         IF BLCELLTY = 'W' THEN
            ADDRESS ISPEXEC 'DISPLAY PANEL(AATP911)'  /* BLW */
         ELSE
            IF BLCELLTY = 'L' THEN
               ADDRESS ISPEXEC 'DISPLAY PANEL(AATP912)'  /* BLL */
            ELSE
               ADDRESS ISPEXEC 'DISPLAY PANEL(AATP913)'  /* BLF */
         IF RC ¬= 0 THEN EXIT    /* ASSUME PF3 HIT IF RC IS NOT 0 */
         IF (LENGTH(HEXDATA) = (2 * FLDLEN)) THEN LEAVE
         ELSE DO
            ERRMESG = 'AATM036'  /* HEX REQUIRES 2 DIGITS PER BYTE */
            CURSLOC = 'HEXDATA'
            ITERATE
         END
      END
      ERROR = 0; ERRMESG = ''; CURSLOC = 'FLDNAME'
      ADDRESS ISPEXEC "VPUT (FLDNAME FLDTYPE BLCELLTY " ||,
         "BLCELLNO BLOFF FLDLEN DDNAME SUBIDX HEXDATA " ||,
         "ERRMESG CURSLOC) SHARED"
      CALL AATX034            /* VALIDATE FIELD DATA */
   END
END
/********************************************************************/
/*  VALIDATE THE VARIABLE DATA ENTERED BY THE USER AND BUILD THE    */
/*  ADDITIONAL VARIABLES FOR THE AATP911-AATP913 PANELS             */
/********************************************************************/
VALIDATE:
   IF FLDTYPE = B THEN DO
      IF ((FLDLEN = 2) | (FLDLEN = 4) | (FLDLEN = 8)) THEN NOP
      ELSE DO
         ERROR = 1
         ERRMESG = 'AATM035'  /* COBOL BINARY FIELDS ARE */
         CURSLOC = 'FLDLEN'   /* ALWAYS 2, 4, OR 8 BYTES LONG */
         RETURN
      END
   END
   IF (FLDLEN > 32) THEN DO
      ERROR = 1
      ERRMESG = 'AATM037'   /* CANNOT HANDLE FIELDS > 16 BYTES */
      CURSLOC = 'FLDLEN'
      RETURN
   END
   TOTLOFST = X2D(BLOFF) + X2D(SUBIDX)   /* COMPUTE TOTAL OFFSET */
   TOTBLCEL = X2D(BLCELLNO)             /* CONVERT BLWCELL FOR COMP */
   DO WHILE TOTLOFST > 4095
      TOTLOFST = TOTLOFST - 4096         /* DEDUCT 4,096 BYTES */
      TOTBLCEL = TOTBLCEL + 1            /* ADD 1 TO BL CELL */
   END
   LINEOFST = TOTLOFST                   /* COPY TOTAL OFFSET */
   LINEOFST = (LINEOFST % 16) * 16       /* MAKE LOW BYTE 0 */
   X = (LINEOFST % 16) // 2              /* CHECK IF 4TH DIGIT IS ODD */
   IF X = 1 THEN                         /* GET CORRECT LINE OFFSET */
         LINEOFST = LINEOFST - 16        /* GET CORRECT LINE OFFSET */
   NBRCOLS = ((TOTLOFST - LINEOFST) % 4) + 1 /* COLUMN NUMBER */
   BYTEOFST = ((TOTLOFST - LINEOFST) //4) + 1 /* BYTE NUMBER IN COL */
   IF BLCELLTY = 'F' THEN DO
      TOTLOFST = TOTLOFST + 1            /* FOR BLF, MAKE 1-RELATIVE */
      BYTEOFST = TOTLOFST                /* SAME FOR BYTE OFFSET */
      TOTBLCEL = BLCELLNO              /* COPY TOTAL BL CELL VALUE */
   END
   ELSE DO
      TOTLOFST = D2X(TOTLOFST,6)            /* CONVERT BACK TO HEX */
      LINEOFST = D2X(LINEOFST,6)            /* CONVERT BACK TO HEX */
      TOTBLCEL = D2X(TOTBLCEL,4)            /* CONVERT BACK TO HEX */
      NBRCOLS = D2X(NBRCOLS,1)              /* CONVERT BACK TO HEX */
      BYTEOFST = D2X(BYTEOFST,1)            /* CONVERT BACK TO HEX */
      BLCELLNO = TOTBLCEL              /* COPY TOTAL BL CELL VALUE */
   END
RETURN
